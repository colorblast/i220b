Script started on 2020-10-15 21:26:46-04:00 [TERM="xterm-256color" TTY="/dev/pts/3" COLUMNS="197" LINES="13"]
]0;jwong123@remote02: ~/i220b/submit/lab7[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7[01;31m (lab7)[00m$ ls
[0m[01;34mexercises[0m  lab7.LOG
]0;jwong123@remote02: ~/i220b/submit/lab7[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7[01;31m (lab7)[00m$ cd exercises/
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ ls
hello.c  Makefile  mystery.o
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ cd [K[K[Kmake
cc -g -Wall  -std=c11    hello.c   -o hello
cc -g -Wall  -std=c11 -S hello.c
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ ./hello 
usage: ./hello NAME...
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ ./hello  [KHELLO
hello HELLO
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ ./hello HELLO[K[K[K[K[Kzerksis
hello zerksis
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ size hello
   text	   data	    bss	    dec	    hex	filename
   1874	    592	     48	   2514	    9d2	hello
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ objsd[Kd[K[Kdump -d hello > hello.objdump
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ objdump -d -s -x hello > hello.objdump
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ objdump -d hello  gre[K[K[K[K| grep -A40 main.:
0000000000001174 <[01;31m[Kmain>:[m[K
    1174:	55                   	push   %rbp
    1175:	48 89 e5             	mov    %rsp,%rbp
    1178:	48 83 ec 20          	sub    $0x20,%rsp
    117c:	89 7d ec             	mov    %edi,-0x14(%rbp)
    117f:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
    1183:	83 7d ec 01          	cmpl   $0x1,-0x14(%rbp)
    1187:	75 2c                	jne    11b5 <main+0x41>
    1189:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    118d:	48 8b 10             	mov    (%rax),%rdx
    1190:	48 8b 05 c9 2e 00 00 	mov    0x2ec9(%rip),%rax        # 4060 <stderr@@GLIBC_2.2.5>
    1197:	48 8d 35 70 0e 00 00 	lea    0xe70(%rip),%rsi        # 200e <_IO_stdin_used+0xe>
    119e:	48 89 c7             	mov    %rax,%rdi
    11a1:	b8 00 00 00 00       	mov    $0x0,%eax
    11a6:	e8 85 fe ff ff       	callq  1030 <fprintf@plt>
    11ab:	bf ef be ad de       	mov    $0xdeadbeef,%edi
    11b0:	e8 8b fe ff ff       	callq  1040 <exit@plt>
    11b5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
    11bc:	eb 2d                	jmp    11eb <main+0x77>
    11be:	8b 45 fc             	mov    -0x4(%rbp),%eax
    11c1:	48 98                	cltq   
    11c3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
    11ca:	00 
    11cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
    11cf:	48 01 d0             	add    %rdx,%rax
    11d2:	48 8b 10             	mov    (%rax),%rdx
    11d5:	48 8b 05 64 2e 00 00 	mov    0x2e64(%rip),%rax        # 4040 <stdout@@GLIBC_2.2.5>
    11dc:	48 89 d6             	mov    %rdx,%rsi
    11df:	48 89 c7             	mov    %rax,%rdi
    11e2:	e8 5e ff ff ff       	callq  1145 <hello>
    11e7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
    11eb:	8b 45 fc             	mov    -0x4(%rbp),%eax
    11ee:	3b 45 ec             	cmp    -0x14(%rbp),%eax
    11f1:	7c cb                	jl     11be <main+0x4a>
    11f3:	b8 00 00 00 00       	mov    $0x0,%eax
    11f8:	c9                   	leaveq 
    11f9:	c3                   	retq   
    11fa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001200 <__libc_csu_init>:
    1200:	41 57                	push   %r15
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ [K]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ ls -l hle[K[Kello
-rwxr-x--- 1 jwong123 jwong123 19384 Oct 15 21:27 [0m[01;32mhello[0m
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ strip hello
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ ls -l hello
-rwxr-x--- 1 jwong123 jwong123 14416 Oct 15 21:36 [0m[01;32mhello[0m
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ make clean
rm -f hello hello.s *.objdump *~
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ objdump -d mystery.o > mystery.objdump
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ [K]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ eh[Kcho "mask"[K $0x7fffff"
mask bashx7fffff
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ echo "mask $0x7fffff"[1P[1P[1P[1P[1P[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1@c[1@a[1@t[1@ 
cat: 'mask bashx7fffff': No such file or directory
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ cat "mask $0x7fffff"[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C{$0x7fffff"[C}0x7fffff"[1P[1P[1P[1@e[1@v[1P[1@c[1@h[1@o
mask {$}0x7fffff
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ make
cc -g -Wall  -std=c11    hello.c   -o hello
cc -g -Wall  -std=c11 -S hello.c
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ gdb hello
GNU gdb (Debian 8.2.1-2+b3) 8.2.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.
--Type <RET> for more, q to quit, c to continue without paging--

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from hello...done.
(gdb) b main
Breakpoint 1 at 0x1183: file hello.c, line 16.
(gdb) r
Starting program: /import/linux/home1/jwong123/projects/i220b/submit/lab7/exercises/hello 

Breakpoint 1, main (argc=1, argv=0x7fffffffda48) at hello.c:16
16	  if (argc == 1) {
(gdb) disas /m [K
Dump of assembler code for function main:
15	{
   0x0000555555555174 <+0>:	push   %rbp
   0x0000555555555175 <+1>:	mov    %rsp,%rbp
   0x0000555555555178 <+4>:	sub    $0x20,%rsp
   0x000055555555517c <+8>:	mov    %edi,-0x14(%rbp)
   0x000055555555517f <+11>:	mov    %rsi,-0x20(%rbp)

16	  if (argc == 1) {
=> 0x0000555555555183 <+15>:	cmpl   $0x1,-0x14(%rbp)
   0x0000555555555187 <+19>:	jne    0x5555555551b5 <main+65>

--Type <RET> for more, q to quit, c to continue without paging--
17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
   0x0000555555555189 <+21>:	mov    -0x20(%rbp),%rax
   0x000055555555518d <+25>:	mov    (%rax),%rdx
   0x0000555555555190 <+28>:	mov    0x2ec9(%rip),%rax        # 0x555555558060 <stderr@@GLIBC_2.2.5>
   0x0000555555555197 <+35>:	lea    0xe70(%rip),%rsi        # 0x55555555600e
   0x000055555555519e <+42>:	mov    %rax,%rdi
   0x00005555555551a1 <+45>:	mov    $0x0,%eax
   0x00005555555551a6 <+50>:	callq  0x555555555030 <fprintf@plt>

18	    exit(0xdeadbeef);
   0x00005555555551ab <+55>:	mov    $0xdeadbeef,%edi
   0x00005555555551b0 <+60>:	callq  0x555555555040 <exit@plt>
--Type <RET> for more, q to quit, c to continue without paging--

19	  }
20	  for (int i = 1; i < argc; i++) {
   0x00005555555551b5 <+65>:	movl   $0x1,-0x4(%rbp)
   0x00005555555551bc <+72>:	jmp    0x5555555551eb <main+119>
   0x00005555555551e7 <+115>:	addl   $0x1,-0x4(%rbp)
   0x00005555555551eb <+119>:	mov    -0x4(%rbp),%eax
   0x00005555555551ee <+122>:	cmp    -0x14(%rbp),%eax
   0x00005555555551f1 <+125>:	jl     0x5555555551be <main+74>

21	    hello(stdout, argv[i]);
   0x00005555555551be <+74>:	mov    -0x4(%rbp),%eax
--Type <RET> for more, q to quit, c to continue without paging--
   0x00005555555551c1 <+77>:	cltq   
   0x00005555555551c3 <+79>:	lea    0x0(,%rax,8),%rdx
   0x00005555555551cb <+87>:	mov    -0x20(%rbp),%rax
   0x00005555555551cf <+91>:	add    %rdx,%rax
   0x00005555555551d2 <+94>:	mov    (%rax),%rdx
   0x00005555555551d5 <+97>:	mov    0x2e64(%rip),%rax        # 0x555555558040 <stdout@@GLIBC_2.2.5>
   0x00005555555551dc <+104>:	mov    %rdx,%rsi
   0x00005555555551df <+107>:	mov    %rax,%rdi
   0x00005555555551e2 <+110>:	callq  0x555555555145 <hello>

22	  }
23	  return 0;
--Type <RET> for more, q to quit, c to continue without paging--
   0x00005555555551f3 <+127>:	mov    $0x0,%eax

24	}
   0x00005555555551f8 <+132>:	leaveq 
   0x00005555555551f9 <+133>:	retq   

End of assembler dump.
(gdb) q[Ki reg
rax            0x555555555174      93824992235892
rbx            0x0                 0
rcx            0x7ffff7f8d718      140737353668376
rdx            0x7fffffffda58      140737488345688
rsi            0x7fffffffda48      140737488345672
rdi            0x1                 1
rbp            0x7fffffffd960      0x7fffffffd960
rsp            0x7fffffffd940      0x7fffffffd940
r8             0x7ffff7f8ed80      140737353674112
r9             0x7ffff7f8ed80      140737353674112
r10            0x3                 3
r11            0x0                 0
--Type <RET> for more, q to quit, c to continue without paging--
r12            0x555555555060      93824992235616
r13            0x7fffffffda40      140737488345664
r14            0x0                 0
r15            0x0                 0
rip            0x555555555183      0x555555555183 <main+15>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) [K(gdb) p argc
$1 = 1
(gdb) p *($rbp -20)
Attempt to dereference a generic pointer.
(gdb) p *($rbp -20)[C[C[1@([1@)[1@i[1@n[1@t[1@ [1@*
$2 = 1
(gdb) p argv
$3 = (const char **) 0x7fffffffda48
(gdb) p argv*(int *)($rbp -20) 20)[C[C[1P)[1P)3)2)[C[1P[1P[1P[1@c[1@o[1@n[1@s[1@t[C[1@ [1@c[1@h[1@a[1@r[C[C[1@*[C[1@*
$4 = (const char **) 0x7fffffffda48
(gdb) p *(const char ***)($rbp - 32)[C[1@([C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C)[]0]
$5 = 0x7fffffffdd3a "/import/linux/home1/jwong123/projects/i220b/submit/lab7/exercises/hello"
(gdb) p (*(const char ***)($rbp - 32))[0][C[1P))[0][1P))[0]0))[0]x))[0]2))[0]0))[0]
$6 = 0x7fffffffdd3a "/import/linux/home1/jwong123/projects/i220b/submit/lab7/exercises/hello"
(gdb) displat[Ky /i *$pc
1: x/i *$pc
=> 0x555555555183 <main+15>:	cmpl   $0x1,-0x14(%rbp)
(gdb) p $eflags
$7 = [ IF ]
(gdb) ni
0x0000555555555187	16	  if (argc == 1) {
1: x/i *$pc
=> 0x555555555187 <main+19>:	jne    0x5555555551b5 <main+65>
(gdb) p $efalgs[K[K[K[Klags
$8 = [ PF ZF IF ]
(gdb) ni
17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
1: x/i *$pc
=> 0x555555555189 <main+21>:	mov    -0x20(%rbp),%rax
(gdb) ni
0x000055555555518d	17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
1: x/i *$pc
=> 0x55555555518d <main+25>:	mov    (%rax),%rdx
(gdb) 
0x0000555555555190	17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
1: x/i *$pc
=> 0x555555555190 <main+28>:	mov    0x2ec9(%rip),%rax        # 0x555555558060 <stderr@@GLIBC_2.2.5>
(gdb) 
0x0000555555555197	17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
1: x/i *$pc
=> 0x555555555197 <main+35>:	lea    0xe70(%rip),%rsi        # 0x55555555600e
(gdb) 
0x000055555555519e	17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
1: x/i *$pc
=> 0x55555555519e <main+42>:	mov    %rax,%rdi
(gdb) 
0x00005555555551a1	17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
1: x/i *$pc
=> 0x5555555551a1 <main+45>:	mov    $0x0,%eax
(gdb) 
0x00005555555551a6	17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
1: x/i *$pc
=> 0x5555555551a6 <main+50>:	callq  0x555555555030 <fprintf@plt>
(gdb) p [K[Ki reg
rax            0x0                 0
rbx            0x0                 0
rcx            0x7ffff7f8d718      140737353668376
rdx            0x7fffffffdd3a      140737488346426
rsi            0x55555555600e      93824992239630
rdi            0x7ffff7f8e680      140737353672320
rbp            0x7fffffffd960      0x7fffffffd960
rsp            0x7fffffffd940      0x7fffffffd940
r8             0x7ffff7f8ed80      140737353674112
r9             0x7ffff7f8ed80      140737353674112
r10            0x3                 3
r11            0x0                 0
r12            0x555555555060      93824992235616
r13            0x7fffffffda40      140737488345664
r14            0x0                 0
r15            0x0                 0
rip            0x5555555551a6      0x5555555551a6 <main+50>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) p ()c)h)a)r) )*) )[1P)[C0x55555555600e
$9 = 0x55555555600e "usage: %s NAME...\n"
(gdb) p %rdi
A syntax error in expression, near `%rdi'.
(gdb) p ()c)h)a)r) )*)[C0x7ffff7f8e680
$10 = 0x7ffff7f8e680 <_IO_2_1_stderr_> "\206 \255", <incomplete sequence \373>
(gdb) ni
usage: /import/linux/home1/jwong123/projects/i220b/submit/lab7/exercises/hello NAME...
18	    exit(0xdeadbeef);
1: x/i *$pc
=> 0x5555555551ab <main+55>:	mov    $0xdeadbeef,%edi
(gdb) ni
0x00005555555551b0	18	    exit(0xdeadbeef);
1: x/i *$pc
=> 0x5555555551b0 <main+60>:	callq  0x555555555040 <exit@plt>
(gdb) ni[K[Kni
[Inferior 1 (process 1170450) exited with code 0357]
(gdb) i reg
The program has no registers now.
(gdb) q
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ gdb hello
GNU gdb (Debian 8.2.1-2+b3) 8.2.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from hello...done.
(gdb) b hello
Breakpoint 1 at 0x1155: file hello.c, line 8.
(gdb) r joe
Starting program: /import/linux/home1/jwong123/projects/i220b/submit/lab7/exercises/hello joe

Breakpoint 1, hello (out=0x7ffff7f8e760 <_IO_2_1_stdout_>, who=0x7fffffffdd7e "joe") at hello.c:8
8	  fprintf(out, "hello %s\n", who);
(gdb) p who
$1 = 0x7fffffffdd7e "joe"
(gdb) d[Kdisas /m
Dump of assembler code for function hello:
7	{
   0x0000555555555145 <+0>:	push   %rbp
   0x0000555555555146 <+1>:	mov    %rsp,%rbp
   0x0000555555555149 <+4>:	sub    $0x10,%rsp
   0x000055555555514d <+8>:	mov    %rdi,-0x8(%rbp)
   0x0000555555555151 <+12>:	mov    %rsi,-0x10(%rbp)

8	  fprintf(out, "hello %s\n", who);
=> 0x0000555555555155 <+16>:	mov    -0x10(%rbp),%rdx
   0x0000555555555159 <+20>:	mov    -0x8(%rbp),%rax
   0x000055555555515d <+24>:	lea    0xea0(%rip),%rsi        # 0x555555556004
   0x0000555555555164 <+31>:	mov    %rax,%rdi
   0x0000555555555167 <+34>:	mov    $0x0,%eax
   0x000055555555516c <+39>:	callq  0x555555555030 <fprintf@plt>

9	}
   0x0000555555555171 <+44>:	nop
   0x0000555555555172 <+45>:	leaveq 
   0x0000555555555173 <+46>:	retq   

End of assembler dump.
(gdb) displaty [K[K[Ky /i *$pc
1: x/i *$pc
=> 0x555555555155 <hello+16>:	mov    -0x10(%rbp),%rdx
(gdb) i reg
rax            0x7ffff7f8e760      140737353672544
rbx            0x0                 0
rcx            0x7ffff7f8d718      140737353668376
rdx            0x7fffffffdd7e      140737488346494
rsi            0x7fffffffdd7e      140737488346494
rdi            0x7ffff7f8e760      140737353672544
rbp            0x7fffffffd930      0x7fffffffd930
rsp            0x7fffffffd920      0x7fffffffd920
r8             0x7ffff7f8ed80      140737353674112
r9             0x7ffff7f8ed80      140737353674112
r10            0x3                 3
r11            0x0                 0
r12            0x555555555060      93824992235616
r13            0x7fffffffda40      140737488345664
r14            0x0                 0
r15            0x0                 0
rip            0x555555555155      0x555555555155 <hello+16>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) p (char *)0x7fffffffdd7e
$2 = 0x7fffffffdd7e "joe"
(gdb) p ([K*(const char ***) [K(r[K$rbp - 8)
$3 = (const char **) 0x7ffff7f8e760 <_IO_2_1_stdout_>
(gdb) p *(const char ***)($rbp - 8)[]0])[0][1@(
$4 = 0xfbad2084 <error: Cannot access memory at address 0xfbad2084>
(gdb) p (*(const char ***)($rbp - 8))[0][C[C[C[C[C[1P))[0]1))[0]0))[0][1P))[0]6))[0]0))[0]
Cannot access memory at address 0x0
(gdb) p (*(const char ***)($rbp - 160))[0][K[K[K[]0][C[C[C[C[1P))[0][1P))[0][1P))[0]0))[0]x))[0]1))[0]0))[0]
$5 = 0x4c45485300656f6a <error: Cannot access memory at address 0x4c45485300656f6a>
(gdb) ni
0x0000555555555159	8	  fprintf(out, "hello %s\n", who);
1: x/i *$pc
=> 0x555555555159 <hello+20>:	mov    -0x8(%rbp),%rax
(gdb) ni
0x000055555555515d	8	  fprintf(out, "hello %s\n", who);
1: x/i *$pc
=> 0x55555555515d <hello+24>:	lea    0xea0(%rip),%rsi        # 0x555555556004
(gdb) nip (*(const char ***)($rbp - 0x10))[0][1P160))[0]
Cannot access memory at address 0x0
(gdb) p (*(const char ***)($rbp - 160))[0][C[C[C[C[C[C[C[C[C[C[C[C[1P))[0][1P))[0][1P))[0]0))[0]x))[0]1))[0]0))[0]
$6 = 0x4c45485300656f6a <error: Cannot access memory at address 0x4c45485300656f6a>
(gdb) p (*(const char ***)($rbp - 0x10))[0]
$7 = 0x4c45485300656f6a <error: Cannot access memory at address 0x4c45485300656f6a>
(gdb) q
A debugging session is active.

	Inferior 1 [process 1176047] will be killed.

Quit anyway? (y or n) y
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ gdb hello
GNU gdb (Debian 8.2.1-2+b3) 8.2.1
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from hello...done.
(gdb) start joe
Temporary breakpoint 1 at 0x1183: file hello.c, line 16.
Starting program: /import/linux/home1/jwong123/projects/i220b/submit/lab7/exercises/hello joe

Temporary breakpoint 1, main (argc=2, argv=0x7fffffffda48) at hello.c:16
16	  if (argc == 1) {
(gdb) disas /m
Dump of assembler code for function main:
15	{
   0x0000555555555174 <+0>:	push   %rbp
   0x0000555555555175 <+1>:	mov    %rsp,%rbp
   0x0000555555555178 <+4>:	sub    $0x20,%rsp
   0x000055555555517c <+8>:	mov    %edi,-0x14(%rbp)
   0x000055555555517f <+11>:	mov    %rsi,-0x20(%rbp)

16	  if (argc == 1) {
=> 0x0000555555555183 <+15>:	cmpl   $0x1,-0x14(%rbp)
   0x0000555555555187 <+19>:	jne    0x5555555551b5 <main+65>

17	    fprintf(stderr, "usage: %s NAME...\n", argv[0]);
   0x0000555555555189 <+21>:	mov    -0x20(%rbp),%rax
   0x000055555555518d <+25>:	mov    (%rax),%rdx
   0x0000555555555190 <+28>:	mov    0x2ec9(%rip),%rax        # 0x555555558060 <stderr@@GLIBC_2.2.5>
   0x0000555555555197 <+35>:	lea    0xe70(%rip),%rsi        # 0x55555555600e
   0x000055555555519e <+42>:	mov    %rax,%rdi
   0x00005555555551a1 <+45>:	mov    $0x0,%eax
   0x00005555555551a6 <+50>:	callq  0x555555555030 <fprintf@plt>

18	    exit(0xdeadbeef);
   0x00005555555551ab <+55>:	mov    $0xdeadbeef,%edi
   0x00005555555551b0 <+60>:	callq  0x555555555040 <exit@plt>

19	  }
20	  for (int i = 1; i < argc; i++) {
   0x00005555555551b5 <+65>:	movl   $0x1,-0x4(%rbp)
   0x00005555555551bc <+72>:	jmp    0x5555555551eb <main+119>
   0x00005555555551e7 <+115>:	addl   $0x1,-0x4(%rbp)
   0x00005555555551eb <+119>:	mov    -0x4(%rbp),%eax
   0x00005555555551ee <+122>:	cmp    -0x14(%rbp),%eax
   0x00005555555551f1 <+125>:	jl     0x5555555551be <main+74>

21	    hello(stdout, argv[i]);
   0x00005555555551be <+74>:	mov    -0x4(%rbp),%eax
   0x00005555555551c1 <+77>:	cltq   
   0x00005555555551c3 <+79>:	lea    0x0(,%rax,8),%rdx
   0x00005555555551cb <+87>:	mov    -0x20(%rbp),%rax
   0x00005555555551cf <+91>:	add    %rdx,%rax
   0x00005555555551d2 <+94>:	mov    (%rax),%rdx
   0x00005555555551d5 <+97>:	mov    0x2e64(%rip),%rax        # 0x555555558040 <stdout@@GLIBC_2.2.5>
   0x00005555555551dc <+104>:	mov    %rdx,%rsi
   0x00005555555551df <+107>:	mov    %rax,%rdi
   0x00005555555551e2 <+110>:	callq  0x555555555145 <hello>

22	  }
23	  return 0;
   0x00005555555551f3 <+127>:	mov    $0x0,%eax

24	}
   0x00005555555551f8 <+132>:	leaveq 
   0x00005555555551f9 <+133>:	retq   

End of assembler dump.
(gdb) b * [K0x00005555555551ee
Breakpoint 2 at 0x5555555551ee: file hello.c, line 20.
(gdb) c
Continuing.

Breakpoint 2, 0x00005555555551ee in main (argc=2, argv=0x7fffffffda48) at hello.c:20
20	  for (int i = 1; i < argc; i++) {
(gdb) p i
$1 = 1
(gdb) c
Continuing.
hello joe

Breakpoint 2, 0x00005555555551ee in main (argc=2, argv=0x7fffffffda48) at hello.c:20
20	  for (int i = 1; i < argc; i++) {
(gdb) p i
$2 = 2
(gdb) set $eax = $eax - 1
(gdb) c
Continuing.
hello (null)

Breakpoint 2, 0x00005555555551ee in main (argc=2, argv=0x7fffffffda48) at hello.c:20
20	  for (int i = 1; i < argc; i++) {
(gdb) q
A debugging session is active.

	Inferior 1 [process 1178518] will be killed.

Quit anyway? (y or n) y
]0;jwong123@remote02: ~/i220b/submit/lab7/exercises[01;32mjwong123@remote02[00m:[01;34m~/i220b/submit/lab7/exercises[01;31m (lab7)[00m$ exit

Script done on 2020-10-15 22:10:50-04:00 [COMMAND_EXIT_CODE="0"]
